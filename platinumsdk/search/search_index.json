{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Platinum SDK Simple Geometry Dash modding SDK for Android Example mod This example overwrites the response of the More Games button on the main menu to a dialog box with the text \"Hello, World!\": #include <Platinum.h> #include <Modify/MenuLayer.h> void onMoreGames(MenuLayer* self) { FLAlertLayer::create( nullptr, \"Platinum SDK\", \"Hello, World!\", \"Close\", NULL )->show(); } __attribute__((constructor)) void load() { MenuLayer_Hooks::onMoreGames((void*) onMoreGames); } The same example on a regular SDK: #include <gd.h> #include <dobby.h> #include <dlfcn.h> #include <cocos2d.h> using namespace cocos2d; void (*onMoreGames_o) (MenuLayer*); void onMoreGames(MenuLayer* self) { FLALertLayer::create( nullptr, \"Platinum SDK\", \"Hello, World!\", \"Close\", NULL )->show(); } __attribute__((constructor)) void load() { DobbyHook( dlsym( dlopen(\"libcocos2dcpp.so\", RTLD_LAZY), \"_ZN9MenuLayer11onMoreGamesEPN7cocos2d8CCObjectE\" ), (void*) onMoreGames, (void**) &onMoreGames_o ); } Documentation Documentation with examples and tutorials can be found here . New to modding? Get help here (Russians only). Credits ItalianApkDownloader for Geometry Dash headers for Android HJfod for Cocos2D-x headers","title":"Home"},{"location":"#platinum-sdk","text":"Simple Geometry Dash modding SDK for Android","title":"Platinum SDK"},{"location":"#example-mod","text":"This example overwrites the response of the More Games button on the main menu to a dialog box with the text \"Hello, World!\": #include <Platinum.h> #include <Modify/MenuLayer.h> void onMoreGames(MenuLayer* self) { FLAlertLayer::create( nullptr, \"Platinum SDK\", \"Hello, World!\", \"Close\", NULL )->show(); } __attribute__((constructor)) void load() { MenuLayer_Hooks::onMoreGames((void*) onMoreGames); } The same example on a regular SDK: #include <gd.h> #include <dobby.h> #include <dlfcn.h> #include <cocos2d.h> using namespace cocos2d; void (*onMoreGames_o) (MenuLayer*); void onMoreGames(MenuLayer* self) { FLALertLayer::create( nullptr, \"Platinum SDK\", \"Hello, World!\", \"Close\", NULL )->show(); } __attribute__((constructor)) void load() { DobbyHook( dlsym( dlopen(\"libcocos2dcpp.so\", RTLD_LAZY), \"_ZN9MenuLayer11onMoreGamesEPN7cocos2d8CCObjectE\" ), (void*) onMoreGames, (void**) &onMoreGames_o ); }","title":"Example mod"},{"location":"#documentation","text":"Documentation with examples and tutorials can be found here .","title":"Documentation"},{"location":"#new-to-modding","text":"Get help here (Russians only).","title":"New to modding?"},{"location":"#credits","text":"ItalianApkDownloader for Geometry Dash headers for Android HJfod for Cocos2D-x headers","title":"Credits"},{"location":"docs/","text":"Documentation Detailed documentation, tutorials and examples. Installation Getting started Download the release from GitHub or type git clone https://github.com/arseny-sh/PlatinumSDK.git ; Install Android NDK version r16b ; Install Python for tools (optional). Configuring You need to provide path to Android NDK in build.bat: set NDK=/path/to/ndk/ rem ^^^ change your android ndk path ^^^ It must end with \"/\" or \"\\\". Then enter the name of the mod in build.mk: MODNAME := template # mod name to build ... Coding Including libraries At the beginning of the mod, you need to include the library \"Platinum.h\": #include <Platinum.h> Hooking Modding on Android differs from modding on Windows in that on Android you need to provide the address of a function to replace it. For example MenuLayer::init refers to \"_ZN9MenuLayer4initEv\". This is called \"hooking\" and DobbyHook does this, but in the Platinum SDK hooking is simplified to the maximum. First, you have to include the hooks you need. They can be found in include/Modify : #include <Modify/classname.h> Replace \"classname\" with the class name you need. For example: #include <Modify/MenuLayer.h> (class names can be found in include/gd ). Overwriting Now define the required function. If it is \"init\", then the type is bool, otherwise it is \"void\": void onMoreGames(MenuLayer* self) { (functions can be found in include/gd too) Usually, function arguments should be \"classname* self\". In other situations see examples . Applying hooks After overwriting you need to apply your function. This is done using the functions from include/Modify folder: classname_Hooks::function((void*) replacement); Replace \"classname\" with the class name, \"function\" with the function name to overwrite and \"replacement\" with your function. For example: MenuLayer_Hooks::onMoreGames((void*) onMoreGames); (void*) is required for hooking in all cases. Then put this code in the loader() function with constructor attribute. For example: __attribute__((constructor)) void loader() { MenuLayer_Hooks::onMoreGames((void*) onMoreGames); } Building After you have written the code, you need to compile it. This is done with \"build.bat\" Windows Batch script. Double click it or run using cmd.exe to see the output. If everything went well, the errors shouldn't display. Compiled .so (shared object) libraries should appear in the folder \"out\". Injecting To inject the mod to Geometry Dash, you need its APK file (Android Package Kit). Download it here . Then install APK Editor and APKTool M on Android. Open APKTool M and navigate to the downloaded Geometry Dash APK file. Then click it and choose \"Quick edit\". Change package name to something else, for example: com.yourname.mods.yourmodname and click \"Save\". After a few seconds you should see a file named something like previousfilename_mod.apk . Now open APK Editor, click \"Select an Apk file\" and navigate to your APK file with changed package name. Click on \"Full Edit (RESOURCE RE-BUILD)\" and then \"Decode All Files (unstable)\". Then click \"Files\" -> \"lib\" -> \"armeabi-v7a\" and click on \"+\". Add your compiled libraries from computer (\"libdobby.so\" and \"libyourmodname.so\"). Then click \"Smali\" and after it loads navigate to root APK directory -> \"smali\" -> \"com\" -> \"robtopx\" -> \"geometryjump\". Click on \"GeometryJump.smali\". You will see something like this: .line 69 const-string v0, \"fmod\" invoke-static {v0}, Lkava/lang/System;->loadLibrary(Ljava/lang/String;)V .line 70 const-string v0, \"cocos2dcpp\" invoke-static {v0}, Lkava/lang/System;->loadLibrary(Ljava/lang/String;)V After that code, copy-paste one of these blocks two times. Replace .line num with .line 71 and .line 72 . Then replace const-string v0, \"libraryname\" with \"dobby\" and \"modname\" (without \"lib\" and \".so\") . You need to get something like this: .line 69 const-string v0, \"fmod\" invoke-static {v0}, Lkava/lang/System;->loadLibrary(Ljava/lang/String;)V .line 70 const-string v0, \"cocos2dcpp\" invoke-static {v0}, Lkava/lang/System;->loadLibrary(Ljava/lang/String;)V .line 71 const-string v0, \"dobby\" invoke-static {v0}, Lkava/lang/System;->loadLibrary(Ljava/lang/String;)V .line 72 const-string v0, \"modname\" invoke-static {v0}, Lkava/lang/System;->loadLibrary(Ljava/lang/String;)V Click on \"Save\" and \"Build\". After a few seconds, click on \"Install\" and enjoy your first mod! For more interesting mods, see examples .","title":"Documentation"},{"location":"docs/#documentation","text":"Detailed documentation, tutorials and examples.","title":"Documentation"},{"location":"docs/#installation","text":"","title":"Installation"},{"location":"docs/#getting-started","text":"Download the release from GitHub or type git clone https://github.com/arseny-sh/PlatinumSDK.git ; Install Android NDK version r16b ; Install Python for tools (optional).","title":"Getting started"},{"location":"docs/#configuring","text":"You need to provide path to Android NDK in build.bat: set NDK=/path/to/ndk/ rem ^^^ change your android ndk path ^^^ It must end with \"/\" or \"\\\". Then enter the name of the mod in build.mk: MODNAME := template # mod name to build ...","title":"Configuring"},{"location":"docs/#coding","text":"","title":"Coding"},{"location":"docs/#including-libraries","text":"At the beginning of the mod, you need to include the library \"Platinum.h\": #include <Platinum.h>","title":"Including libraries"},{"location":"docs/#hooking","text":"Modding on Android differs from modding on Windows in that on Android you need to provide the address of a function to replace it. For example MenuLayer::init refers to \"_ZN9MenuLayer4initEv\". This is called \"hooking\" and DobbyHook does this, but in the Platinum SDK hooking is simplified to the maximum. First, you have to include the hooks you need. They can be found in include/Modify : #include <Modify/classname.h> Replace \"classname\" with the class name you need. For example: #include <Modify/MenuLayer.h> (class names can be found in include/gd ).","title":"Hooking"},{"location":"docs/#overwriting","text":"Now define the required function. If it is \"init\", then the type is bool, otherwise it is \"void\": void onMoreGames(MenuLayer* self) { (functions can be found in include/gd too) Usually, function arguments should be \"classname* self\". In other situations see examples .","title":"Overwriting"},{"location":"docs/#applying-hooks","text":"After overwriting you need to apply your function. This is done using the functions from include/Modify folder: classname_Hooks::function((void*) replacement); Replace \"classname\" with the class name, \"function\" with the function name to overwrite and \"replacement\" with your function. For example: MenuLayer_Hooks::onMoreGames((void*) onMoreGames); (void*) is required for hooking in all cases. Then put this code in the loader() function with constructor attribute. For example: __attribute__((constructor)) void loader() { MenuLayer_Hooks::onMoreGames((void*) onMoreGames); }","title":"Applying hooks"},{"location":"docs/#building","text":"After you have written the code, you need to compile it. This is done with \"build.bat\" Windows Batch script. Double click it or run using cmd.exe to see the output. If everything went well, the errors shouldn't display. Compiled .so (shared object) libraries should appear in the folder \"out\".","title":"Building"},{"location":"docs/#injecting","text":"To inject the mod to Geometry Dash, you need its APK file (Android Package Kit). Download it here . Then install APK Editor and APKTool M on Android. Open APKTool M and navigate to the downloaded Geometry Dash APK file. Then click it and choose \"Quick edit\". Change package name to something else, for example: com.yourname.mods.yourmodname and click \"Save\". After a few seconds you should see a file named something like previousfilename_mod.apk . Now open APK Editor, click \"Select an Apk file\" and navigate to your APK file with changed package name. Click on \"Full Edit (RESOURCE RE-BUILD)\" and then \"Decode All Files (unstable)\". Then click \"Files\" -> \"lib\" -> \"armeabi-v7a\" and click on \"+\". Add your compiled libraries from computer (\"libdobby.so\" and \"libyourmodname.so\"). Then click \"Smali\" and after it loads navigate to root APK directory -> \"smali\" -> \"com\" -> \"robtopx\" -> \"geometryjump\". Click on \"GeometryJump.smali\". You will see something like this: .line 69 const-string v0, \"fmod\" invoke-static {v0}, Lkava/lang/System;->loadLibrary(Ljava/lang/String;)V .line 70 const-string v0, \"cocos2dcpp\" invoke-static {v0}, Lkava/lang/System;->loadLibrary(Ljava/lang/String;)V After that code, copy-paste one of these blocks two times. Replace .line num with .line 71 and .line 72 . Then replace const-string v0, \"libraryname\" with \"dobby\" and \"modname\" (without \"lib\" and \".so\") . You need to get something like this: .line 69 const-string v0, \"fmod\" invoke-static {v0}, Lkava/lang/System;->loadLibrary(Ljava/lang/String;)V .line 70 const-string v0, \"cocos2dcpp\" invoke-static {v0}, Lkava/lang/System;->loadLibrary(Ljava/lang/String;)V .line 71 const-string v0, \"dobby\" invoke-static {v0}, Lkava/lang/System;->loadLibrary(Ljava/lang/String;)V .line 72 const-string v0, \"modname\" invoke-static {v0}, Lkava/lang/System;->loadLibrary(Ljava/lang/String;)V Click on \"Save\" and \"Build\". After a few seconds, click on \"Install\" and enjoy your first mod! For more interesting mods, see examples .","title":"Injecting"},{"location":"ex/","text":"Examples Creating alert Alert is the easiest way to check if the mod is working. To create an alert, call the function FLAlertLayer::create with arguments: (FLAlertLayerProtocol*) delegate - set to nullptr ; (const char*) title - alert title; (std::string) text - alert text; (const char*) btn1Text - text of the first button (set to NULL if you won't use); (const char*) btn2Text - text of the second button (set to NULL if you won't use); [optional] (float) layerHeight - alert height; [optional] (bool) scrollable - can scroll an alert; FLAlertLayer::create( nullptr, \"Platinum SDK\", \"Hello, World!\", \"Close\", NULL )->show(); Modifying MenuLayer::init MenuLayer::init is a function what refers to Geometry Dash main menu. In this example we are saving previous state of MenuLayer::init and overwriting it. Function type should be bool , because it's init : #include <Platinum.h> #include <Modify/MenuLayer.h> bool init(MenuLayer* self) { // getting window size auto size = CCDirector::sharedDirector()->getVisibleSize(); // saving previous state // MenuLayer_Origins is from Modify/MenuLayer.h auto ret = MenuLayer_Origins::init(self); // creating a sprite with an image from GJ_GameSheet03 // https://hjfod.github.io/cocos-headers/d8/de9/group__sprite__nodes.html#gac76716a663005d6cd59cb32e1c4bb077 auto sprite = CCSprite::createWithSpriteFrameName(\"GJ_updateBtn_001.png\"); // creating a button // https://hjfod.github.io/cocos-headers/db/dbd/classcocos2d_1_1_c_c_menu_item_sprite.html#ae68c2405e53e50c90fa874875c7ede66 // menu_selector() refers to MenuLayer::onDaily auto button = CCMenuItemSpriteExtra::create( sprite, sprite, self, menu_selector(MenuLayer::onDaily) ); // setting button scale to 1x button->setScale(1.0); // creating a menu (that's how cocos works) auto menu = CCMenu::create(); // adding button to menu // second argument is Z-pos (layer on the screen) menu->addChild(button, 100); // setting menu (button) position menu->setPosition({ size.width / 20, size.height / 10 * 7 }); // adding menu to MenuLayer self->addChild(menu, 100); // returning previous state with our button return ret; } __attribute__((constructor)) void load() { MenuLayer_Hooks::init((void*) init); } Creating a label In this example we are creating a label in MenuLayer. #include <Platinum.h> #include <Modify/MenuLayer.h> bool init(MenuLayer* self) { // getting window size auto size = CCDirector::sharedDirector()->getVisibleSize(); // saving previous state // MenuLayer_Origins is from Modify/MenuLayer.h auto ret = MenuLayer_Origins::init(self); // creating a label with text \"Hello, World!\" and font \"chatFont.fnt\" // you can also use \"bigFont.fnt\" and \"goldFont.fnt\" // https://hjfod.github.io/cocos-headers/dc/dfb/classcocos2d_1_1_c_c_label_b_m_font.html#ac23bf59151c3daf0d1596497583d199a auto label = CCLabelBMFont::create(\"Hello, World!\", \"chatFont.fnt\"); // configuring the label label->setColor({255, 255, 255}); label->setPosition({size.width / 2, size.height - 15}); label->setScale(0.7); // applying changes self->addChild(label); // returning previous state with our label return ret; } __attribute__((constructor)) void load() { MenuLayer_Hooks::init((void*) init); } Creating a custom hook Custom hooks can be useful then there aren't any built-in hooks for your function, e.g Cocos function. In this example we are: creating CCLabelBMFont origins; overwriting CCLabelBMFont to return \"RobTop\" every time; hooking it. #include <Platinum.h> // creating custom origins namespace CCLabelBMFont_Origins { CCLabelBMFont* (*create)(const char* str, const char* fntFile); // get function arguments here: https://hjfod.github.io/cocos-headers/ } // creating custom hooks namespace CCLabelBMFont_Hooks { void create(void* rep) { // now we need to get CCLabelBMFont address. // you can find all addresses in tools/functions.csv // open it with any CSV viewer, e.g. https://csviewer.com/ // then find it and paste in the first argument Hook( \"_ZN7cocos2d13CCLabelBMFont6createEPKcS2_\", // you can find multiple addresses rep, // replacement CCLabelBMFont_Origins::create // origin ); } } // overwriting CCLabelBMFont* create(const char* str, const char* fntFile) { // get function arguments here: https://hjfod.github.io/cocos-headers/ return CCLabelBMFont_Origins::create(\"RobTop\", fntFile); // always returning \"RobTop\" } __attribute__((constructor)) void load() { CCLabelBMFont_Hooks::create((void*) create); }","title":"Examples"},{"location":"ex/#examples","text":"","title":"Examples"},{"location":"ex/#creating-alert","text":"Alert is the easiest way to check if the mod is working. To create an alert, call the function FLAlertLayer::create with arguments: (FLAlertLayerProtocol*) delegate - set to nullptr ; (const char*) title - alert title; (std::string) text - alert text; (const char*) btn1Text - text of the first button (set to NULL if you won't use); (const char*) btn2Text - text of the second button (set to NULL if you won't use); [optional] (float) layerHeight - alert height; [optional] (bool) scrollable - can scroll an alert; FLAlertLayer::create( nullptr, \"Platinum SDK\", \"Hello, World!\", \"Close\", NULL )->show();","title":"Creating alert"},{"location":"ex/#modifying-menulayerinit","text":"MenuLayer::init is a function what refers to Geometry Dash main menu. In this example we are saving previous state of MenuLayer::init and overwriting it. Function type should be bool , because it's init : #include <Platinum.h> #include <Modify/MenuLayer.h> bool init(MenuLayer* self) { // getting window size auto size = CCDirector::sharedDirector()->getVisibleSize(); // saving previous state // MenuLayer_Origins is from Modify/MenuLayer.h auto ret = MenuLayer_Origins::init(self); // creating a sprite with an image from GJ_GameSheet03 // https://hjfod.github.io/cocos-headers/d8/de9/group__sprite__nodes.html#gac76716a663005d6cd59cb32e1c4bb077 auto sprite = CCSprite::createWithSpriteFrameName(\"GJ_updateBtn_001.png\"); // creating a button // https://hjfod.github.io/cocos-headers/db/dbd/classcocos2d_1_1_c_c_menu_item_sprite.html#ae68c2405e53e50c90fa874875c7ede66 // menu_selector() refers to MenuLayer::onDaily auto button = CCMenuItemSpriteExtra::create( sprite, sprite, self, menu_selector(MenuLayer::onDaily) ); // setting button scale to 1x button->setScale(1.0); // creating a menu (that's how cocos works) auto menu = CCMenu::create(); // adding button to menu // second argument is Z-pos (layer on the screen) menu->addChild(button, 100); // setting menu (button) position menu->setPosition({ size.width / 20, size.height / 10 * 7 }); // adding menu to MenuLayer self->addChild(menu, 100); // returning previous state with our button return ret; } __attribute__((constructor)) void load() { MenuLayer_Hooks::init((void*) init); }","title":"Modifying MenuLayer::init"},{"location":"ex/#creating-a-label","text":"In this example we are creating a label in MenuLayer. #include <Platinum.h> #include <Modify/MenuLayer.h> bool init(MenuLayer* self) { // getting window size auto size = CCDirector::sharedDirector()->getVisibleSize(); // saving previous state // MenuLayer_Origins is from Modify/MenuLayer.h auto ret = MenuLayer_Origins::init(self); // creating a label with text \"Hello, World!\" and font \"chatFont.fnt\" // you can also use \"bigFont.fnt\" and \"goldFont.fnt\" // https://hjfod.github.io/cocos-headers/dc/dfb/classcocos2d_1_1_c_c_label_b_m_font.html#ac23bf59151c3daf0d1596497583d199a auto label = CCLabelBMFont::create(\"Hello, World!\", \"chatFont.fnt\"); // configuring the label label->setColor({255, 255, 255}); label->setPosition({size.width / 2, size.height - 15}); label->setScale(0.7); // applying changes self->addChild(label); // returning previous state with our label return ret; } __attribute__((constructor)) void load() { MenuLayer_Hooks::init((void*) init); }","title":"Creating a label"},{"location":"ex/#creating-a-custom-hook","text":"Custom hooks can be useful then there aren't any built-in hooks for your function, e.g Cocos function. In this example we are: creating CCLabelBMFont origins; overwriting CCLabelBMFont to return \"RobTop\" every time; hooking it. #include <Platinum.h> // creating custom origins namespace CCLabelBMFont_Origins { CCLabelBMFont* (*create)(const char* str, const char* fntFile); // get function arguments here: https://hjfod.github.io/cocos-headers/ } // creating custom hooks namespace CCLabelBMFont_Hooks { void create(void* rep) { // now we need to get CCLabelBMFont address. // you can find all addresses in tools/functions.csv // open it with any CSV viewer, e.g. https://csviewer.com/ // then find it and paste in the first argument Hook( \"_ZN7cocos2d13CCLabelBMFont6createEPKcS2_\", // you can find multiple addresses rep, // replacement CCLabelBMFont_Origins::create // origin ); } } // overwriting CCLabelBMFont* create(const char* str, const char* fntFile) { // get function arguments here: https://hjfod.github.io/cocos-headers/ return CCLabelBMFont_Origins::create(\"RobTop\", fntFile); // always returning \"RobTop\" } __attribute__((constructor)) void load() { CCLabelBMFont_Hooks::create((void*) create); }","title":"Creating a custom hook"}]}